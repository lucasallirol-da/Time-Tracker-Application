-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0



module User where

import TimeTracker
-- val UserCmd = ledger_api_utils.create(user1.packageId,"User","User",Map("username" -> bob,"following" -> alice,"timetrackers" -> Map("description" -> "first Time Tracker", "startTime" -> 0, "endTime" -> 0, "user" -> bob, "project" -> "support")))

-- MAIN_TEMPLATE_BEGIN
template User with
    username: Party
    -- following: [Party]
    timetrackers: [TimeTracker]
  where
    signatory username
    -- observer following
-- MAIN_TEMPLATE_END

    key username: Party
    maintainer key

    -- TRACKTIME_BEGIN
    nonconsuming choice TrackTime: ContractId User with
        newTracker: TimeTracker
      controller username
      do
        archive self
        create this with timetrackers = newTracker :: timetrackers
    -- TRACKTIME_END

    -- -- FOLLOW_BEGIN
    -- nonconsuming choice Follow: ContractId User with
    --     userToFollow: Party
    --   controller username
    --   do
    --     assertMsg "You cannot follow yourself" (userToFollow /= username)
    --     assertMsg "You cannot follow the same user twice" (notElem userToFollow following)
    --     archive self
    --     create this with following = userToFollow :: following
    -- -- FOLLOW_END

-- ALIAS_BEGIN
-- template Alias with
--     username: Party
--     alias: Text
--     public: Party
--   where
--     signatory username
--     observer public

--     key (username, public) : (Party, Party)
--     maintainer key._1

--     nonconsuming choice Change: ContractId Alias with
--         newAlias: Text
--       controller username
--       do
--         archive self
--         create this with alias = newAlias
-- ALIAS_END

-- template TimeTracker with
--     description: Text
--     startTime: Time 
--     endTime: Time 
--     user: Party
--     project: Text
--   where
--     signatory user
    

--     choice UpdateEndTime
--       : ContractId TimeTracker
--       with
--         newEndTime : Time
--       controller user
--       do
--         assertMsg "newEndTime has to be later than start time." (startTime < newEndTime)
--         create this with
--           endTime = newEndTime
