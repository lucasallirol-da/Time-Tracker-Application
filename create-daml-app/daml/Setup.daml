module Setup where

-- import DA.Optional (fromSomeNote)
-- import qualified DA.Text as T
import Daml.Script
--Need to qualify to avoid confusion with User.User used bellow
import qualified User as Worker
import Timetracker

-- data Projects = Projects
--   with
--     newApp : Party
--     support : Party
--     cloud: Party

-- | A test user for the create-daml-app network.
-- When a participantName is provided, the testUser will be created/or fetched
-- on the given participant.
data TestUser = TestUser with
  alias : Text
  public : Party
  participantName: Optional ParticipantName

defaultParticipant : Optional ParticipantName
defaultParticipant = None
-- | Create a public party, then create three test users.

setup : Script ()
setup = do
  alice <- allocatePartyWithHint "Alice" (PartyIdHint "Alice")
  bob <- allocatePartyWithHint "Bob" (PartyIdHint "Bob")
  aliceId <- validateUserId "alice"
  bobId <- validateUserId "bob"
  createUser (User aliceId (Some alice)) [CanActAs alice]
  createUser (User bobId (Some bob)) [CanActAs bob]

  newApp <- allocateParty "newApp"
  support <- allocateParty "support"
  cloud <- allocateParty "cloud"

  timeTracker1Cid <- createCertificate newApp
  timeTracker2Cid <- createCertificate support
  timeTracker3Cid <- createCertificate cloud

  workerCid <- submit alice do
    createCmd Worker with
      username = alice
      timetrackers = [timeTracker1Cid, timeTracker2Cid, timeTracker3Cid]

  
  
-- Setup script to create Timetrackers sample certificates
createCertificate : Script (ContractId Timetracker)
createCertificate project = do
    -- Get the current time
    currentTime <- getTime
    submit alice do
      createCmd TimeTracker with
        description = "working on the new App"
        startTime = currentTime
        endTime = None
        user = alice
        project

  


  

        

  
  -- pure $ Projects with
  --   newApp
  --   support
  --   cloud

  
    

--   -- | Create a test user.
-- createProject : Text -> Script Party
-- createProject projectName = do
--   u <- getOrCreateUser alias (Some public) participantName
--   let p = getPrimaryParty u
--   pure p
    


-- -- Generate the contractId using the helper function
-- let contractId = generateContractId currentTime

-- -- Create the contract with the auto-assigned contractId
-- contractId <- submit alice do
--   createCmd Contract with
--     issuer = alice
--     owner = bob
--     contractId = contractId
--     creationTime = currentTime
