-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Timetracker where
import Daml.Script
import DA.Time
import DA.Date
-- MAIN_TEMPLATE_BEGIN
template Timetracker with
    project: Party
    description: Text
    startTime: Time 
    endTime: Time 
    user: Party
    timeIsTracked: Bool
  where
    signatory user
    observer project

    -- key (user, project ): (Party, Text)
    -- maintainer key._1


    nonconsuming choice StopTracking: ContractId Timetracker
      controller user
      do
        newEndTime <- getTime
        assertMsg "newEndTime has to be later than start time." (startTime <= newEndTime)
        assertMsg "The Time is not Tracked, please start tracking time first." (timeIsTracked)
        archive self
        create this with
          endTime = newEndTime
          timeIsTracked = False

    nonconsuming choice StartTracking: ContractId Timetracker 
      controller user
      do
        assertMsg "The Time is not Tracked, please start tracking time first." (not timeIsTracked)
        currentTime <- getTime
        archive self
        create this with 
          startTime = currentTime
          timeIsTracked = True

test_timetracker = script do
  alice <- allocateParty "Alice"
  newApp <- allocateParty "newApp"

  let defaultTime = time (date 1970 Jan 1) 00 00 00 
  setTime (time (date 2024 Apr 5) 14 30 05)

  -- create Timetracker
  timetracker <- submit alice do
    createCmd Timetracker with
      project = newApp
      description = "working on this project"
      startTime = defaultTime
      endTime =  defaultTime
      user = alice
      timeIsTracked = False


  timetracker <- submit alice do exerciseCmd timetracker StartTracking
  timetracker <- submit alice do exerciseCmd timetracker StopTracking
  timetracker <- submit alice do exerciseCmd timetracker StartTracking
  --Can't start a timetracker if it's started already
  submitMustFail alice do exerciseCmd timetracker StartTracking
  timetracker <- submit alice do exerciseCmd timetracker StopTracking
  --Can't stop a timetracker if it's not started 
  submitMustFail alice do exerciseCmd timetracker StopTracking

  -- setting custom time that is later than current one
  let laterTime = time (date 2029 Jan 1) 00 00 00

  timetracker2 <- submit alice do
    createCmd Timetracker with
      project = newApp
      description = "working on this project"
      startTime = laterTime
      endTime =  defaultTime
      user = alice
      timeIsTracked = False

  -- Can't have a stopTime later than start time
  submitMustFail alice do exerciseCmd timetracker2 StopTracking


