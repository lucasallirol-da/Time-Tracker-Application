module Setup where
import Daml.Script
import DA.Time
import DA.Date
import Timetracker
import TimeSummary
import DA.Assert ((=/=), (===))
import DA.List (head)

setup : Script ([ContractId Timetracker])
setup = do
  alice <- allocatePartyWithHint "Alice" (PartyIdHint "Alice")
  aliceId <- validateUserId "alice"
  createUser (User aliceId (Some alice)) [CanActAs alice]

  newApp <- allocateParty "New App"
  support <- allocateParty "Support"
  ux <- allocateParty "UX design"

  --TT=TimeTracker
  newAppTTCid <- createTTCertificate alice newApp "Adding new trigger feature"
  supportTTCid <- createTTCertificate alice support "Helping client with authentication issue"
  uxTTCid <- createTTCertificate alice ux "Making ui more accessible"

  -- Stop Tracking new app by exercising contract change
  newAppTTCid <- submit alice do exerciseCmd newAppTTCid StopTracking
  -- Start tracking again the new app project
  newAppTTCid <- createTTCertificate alice newApp "adding testcases"
  return ([newAppTTCid,supportTTCid,uxTTCid])


-- Function to query all contracts for one project or one user
getContracts : Party -> Script [Timetracker]
getContracts party= do 
  contracts <- query @Timetracker party
  -- Previous contract return both contractId and contract payload, we map to get only the second element of the tuple contract part of each element in the contracts list
  pure (map snd contracts)


create_summary = script do
  alice <- allocateParty "Alice"
  newApp <- allocateParty "New App"
  support <- allocateParty "Support"
  ux <- allocateParty "UX design"
  setTime (time (date 2024 Apr 5) 14 30 05)

  --TT is short for TimeTracker
  newAppTTCid <- createTTCertificate alice newApp "Adding new trigger feature"
  supportTTCid <- createTTCertificate alice support "Helping client with authentication issue"
  uxTTCid <- createTTCertificate alice ux "Making ui more accessible "

  passTime (hours 10)
  -- Stop Tracking new app by exercising contract change
  newAppTTCid <- submit alice do exerciseCmd newAppTTCid StopTracking

  passTime (days 5)

  supportTTCid <- submit alice do exerciseCmd supportTTCid StopTracking

  passTime (days 30)

  uxTTCid <- submit alice do exerciseCmd uxTTCid StopTracking

  newAppContracts <- getContracts newApp
  supportContracts <- getContracts support
  uxContracts <- getContracts ux


  --Alice is signatory on all contracts so get contracts will query every contract of Timetracker template
  allContracts <- getContracts alice
  allContractsTime <- getTotalTime allContracts

  -- Create TimeSummary for specifics projects
  (newAppCid, newAppTotalTime) <- createTSCertificate alice (Some newApp) newAppContracts
  (supportCid, supportTotalTime) <- createTSCertificate alice (Some support) supportContracts
  (uxCid, uxTotalTime) <- createTSCertificate alice (Some ux) uxContracts

  assert(newAppTotalTime> seconds 0)
  assert(supportTotalTime> newAppTotalTime)
  assert(uxTotalTime> supportTotalTime)

  --Create TimeSummary for all projects (That Alice worked on)
  (toDateCid, toDateTotalTime) <- createTSCertificate alice None allContracts
  -- assert the total time are as expected
  toDateTotalTime
    === (newAppTotalTime + supportTotalTime + uxTotalTime)

  --Create TimeSummary for every Project during April (Projects that were finsihed in April)
  allAprilContracts <- filterTimeTrackers allContracts (time (date 2024 Apr 1) 00 00 00) (time (date 2024 Apr 30) 00 00 00)
  allAprilContractsTime <- getTotalTime allAprilContracts
  (aprilCid, aprilTotalTime) <- createTSCertificate alice None allAprilContracts
  -- assert the total time are as expected
  toDateTotalTime
    === (newAppTotalTime + supportTotalTime + uxTotalTime)

  --Share the Summary with new parties
  bob <- allocateParty "Bob"
  lucas <- allocateParty "Lucas"
  toDateCid <- submit alice do 
    exerciseCmd toDateCid ShareTimeSummary
      with newObervers = [bob]
  newAppCid <- submit alice do 
    exerciseCmd newAppCid ShareTimeSummary
      with newObervers = [lucas]

  --assert Bob and Lucas see the corrects timeSummary
  bobContracts <- query @TimeSummary bob
  let bobContract = head bobContracts

  lucasContracts <- query @TimeSummary lucas
  let lucasContract = head lucasContracts

  fst bobContract === toDateCid
  fst bobContract =/= newAppCid

  fst lucasContract =/= toDateCid
  fst lucasContract === newAppCid




